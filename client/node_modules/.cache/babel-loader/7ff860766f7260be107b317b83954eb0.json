{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; //import collectionItemComponent from '../components/collection-item/collection-item.component';\n\nconst config = {\n  apiKey: \"AIzaSyB0SAqxn4dy93QR222eeO3oXw1d8QEvOo0\",\n  authDomain: \"crwn-db-52f3c.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-52f3c.firebaseio.com\",\n  projectId: \"crwn-db-52f3c\",\n  storageBucket: \"crwn-db-52f3c.appspot.com\",\n  messagingSenderId: \"943502831223\",\n  appId: \"1:943502831223:web:722b5439969157b34b6072\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  const collectionRef = firestore.collection('users');\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  });\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    //set the property to collection title and then make that key to out collection itself \n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {}); // console.log(transformedCollection);\n}; //google sign in \n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/cesur/Desktop/ecommerce-project/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","collectionRef","collection","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n//import collectionItemComponent from '../components/collection-item/collection-item.component';\r\n\r\nconst config =  {\r\n    apiKey: \"AIzaSyB0SAqxn4dy93QR222eeO3oXw1d8QEvOo0\",\r\n    authDomain: \"crwn-db-52f3c.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-52f3c.firebaseio.com\",\r\n    projectId: \"crwn-db-52f3c\",\r\n    storageBucket: \"crwn-db-52f3c.appspot.com\",\r\n    messagingSenderId: \"943502831223\",\r\n    appId: \"1:943502831223:web:722b5439969157b34b6072\"\r\n  };\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n\r\n  if(!userAuth) return;\r\n  \r\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n  const snapShot = await userRef.get();\r\n  const collectionRef = firestore.collection('users');\r\n  const collectionSnapshot = await collectionRef.get();\r\n  \r\n  console.log({collection: collectionSnapshot.docs.map(doc =>doc.data())});\r\n  \r\n  if(!snapShot.exists){\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try{\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt, \r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating user', error.message)\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\n\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    console.log(collectionRef);\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      console.log(newDocRef);\r\n      batch.set(newDocRef, obj);\r\n    });\r\n    return await batch.commit()\r\n\r\n };\r\n\r\n export const convertCollectionsSnapshotToMap = (collections) => {\r\n   const transformedCollection = collections.docs.map( doc =>{\r\n     const {title, items} = doc.data();\r\n\r\n     return {\r\n       routeName: encodeURI(title.toLowerCase()),\r\n       id: doc.id,\r\n       title,\r\n       items\r\n     }\r\n   });\r\n   return transformedCollection.reduce( (accumulator, collection ) =>{\r\n    //set the property to collection title and then make that key to out collection itself \r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n     return accumulator;\r\n   }, {})\r\n  // console.log(transformedCollection);\r\n }\r\n\r\n\r\n//google sign in \r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters( {prompt: 'select_account' })\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}